name: CI

on:
  push:
    branches: 
      - main
    paths:
      - Dockerfile
      - entrypoint.sh
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches: 
      - main
    paths:
      - Dockerfile

env:
  ARCHITECTURES: linux/amd64,linux/arm64
  GH_TOKEN: ${{ github.token }}
  IMAGE_NAME: actions-runner
  IMAGE_DESCRIPTION: Built by GitHub Actions, the associated workflow is https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  LICENSES: MIT
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  builder-switch:
    name: Builder switch
    runs-on: ubuntu-latest
    outputs:
      switch: ${{ steps.check.outputs.switch }}
    steps:
      - name: Check condition
        id: check
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CONDITION=$(echo "${{ github.event.pull_request.head.ref }}" | grep -q "^renovate/ghcr.io-actions-actions-runner-" && echo "true" || echo "false")
            if [ "$CONDITION" = "true" ]; then
              echo "switch=true" >> $GITHUB_OUTPUT
            else
              echo "switch=false" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "switch=true" >> $GITHUB_OUTPUT
          fi

  publish-images:
    name: Build and publish
    runs-on: ubuntu-latest
    needs: builder-switch
    if: needs.builder-switch.outputs.switch == 'true'
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set env
        run: |
          owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          echo "OWNER=$owner" >> "$GITHUB_ENV"
          echo "IMAGE_FULL_NAME=ghcr.io/$owner/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          current_version=$(awk '/^FROM/ {print $2}' Dockerfile | cut -d':' -f2)
          echo "current version: $current_version"
          echo "IMAGE_TAG=$(awk '/^FROM/ {print $2}' Dockerfile | cut -d':' -f2)" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.OWNER }}
          password: ${{ env.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for image registry
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FULL_NAME }}
          annotations: |
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.licenses=${{ env.LICENSES }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}
          labels: |
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.licenses=${{ env.LICENSES }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_FULL_NAME }}:latest
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ ENV.ARCHITECTURES }}

      - name: Calculate image size
        run: |
          docker manifest inspect ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }} -v > manifest.json
          curl -o ./get_image_size.sh -s https://raw.githubusercontent.com/pooneyy/1Panel-Appstore/refs/heads/script/get_image_size.sh
          chmod +x get_image_size.sh

      - name: Get the package id
        run: |
          response=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /users/${{ env.OWNER }}/packages/container/${{ env.IMAGE_NAME }}/versions)
          version_id=$(echo "$response" | jq -r '.[] | select(.metadata.container.tags[]? == "${{ env.IMAGE_TAG }}") | .id')
          echo "VERSION_ID=$version_id" >> $GITHUB_ENV

      - name: Add a summary for the job
        run: |
          arch_array=($(echo ${{ ENV.ARCHITECTURES }} | tr -d '"' | tr ',' '\n' | tr -d ' '))
          echo "## ${{ github.event.inputs.task_description }}" >> $GITHUB_STEP_SUMMARY
          echo "## Build Report" >> $GITHUB_STEP_SUMMARY
          echo "### Get the image" >> $GITHUB_STEP_SUMMARY
          echo "<pre lang="bash">" >> $GITHUB_STEP_SUMMARY
          echo "<code>docker pull ${{ env.IMAGE_FULL_NAME }}:${{ env.IMAGE_TAG }}</code>" >> $GITHUB_STEP_SUMMARY
          echo "</pre>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Image Url: https://github.com/users/${{ env.OWNER }}/packages/container/${{ env.IMAGE_NAME }}/${{ env.VERSION_ID }}?tag=${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "### Image info" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | Image Size |" >> $GITHUB_STEP_SUMMARY
          echo "|:-:|:-:|" >> $GITHUB_STEP_SUMMARY
          for arch in "${arch_array[@]}"; do
            echo "| $arch | $(./get_image_size.sh --arch $arch) |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary><strong>Image manifest</strong></summary>" >> $GITHUB_STEP_SUMMARY
          echo "<pre lang="json"><code>" >> $GITHUB_STEP_SUMMARY
          cat manifest.json >> $GITHUB_STEP_SUMMARY
          echo "</code></pre></details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  push-tag:
    name: Update Version Tag
    runs-on: ubuntu-latest
    needs: builder-switch
    if: needs.builder-switch.outputs.switch == 'true'
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get actions-runner version
        run: |
          version=$(awk '/^FROM/ {print $2}' Dockerfile | cut -d':' -f2)
          echo "RUNNER_VERSION=$version"  >> $GITHUB_ENV
          echo "TAG=v$version"  >> $GITHUB_ENV

      - name: Add version tag
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global credential.helper store
          echo "https://${{ github.actor }}:${{ github.token }}@github.com" > ~/.netrcgit-credentials
          current_version=$(git describe --tags --always)
          git push origin -d $TAG || true
          git tag -d $TAG || true
          git tag -a $TAG -m "Actions runner version $RUNNER_VERSION"
          git push origin $TAG

  merge-pr:
    name: Auto Merge the PR
    runs-on: ubuntu-latest
    needs: 
      - publish-images
      - push-tag
    if: |
      ${{ github.event.pull_request != null && github.event.pull_request.number > 0 }} &&
      (needs.publish-images.result == 'success' || needs.publish-images.result == 'skipped') &&
      (needs.push-tag.result == 'success' || needs.push-tag.result == 'skipped')
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.base_ref }}
      
      - name: Merge PR
        run: |
          max_attempts=5
          for attempt in $(seq 1 $max_attempts); do
            if gh pr merge $PR_NUMBER --squash --delete-branch --body ""; then
              echo "✅ Merge PR #$PR_NUMBER Success"
              exit 0
            else
              echo "⚠️ Merge PR #$PR_NUMBER Failed ($attempt / $max_attempts)"
              sleep 5
            fi
          done
